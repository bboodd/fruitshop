<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.shop.fruitshop.user.UserMapper">

<!--    회원가입    -->
    <insert id="joinUser" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO user (email, nickname, password)
        VALUES (#{email}, #{nickname}, #{password})
    </insert>

<!--    회원 약관 매핑   -->
    <insert id="joinUserTerm">
        INSERT INTO user_term(user_id, term_id)
        VALUES (#{userId},
                (SELECT id FROM term WHERE title = #{termStatus}))
    </insert>

<!--    이메일로 회원 찾기    -->
    <select id="findByEmail" resultType="com.shop.fruitshop.domain.User">
        SELECT *
        FROM user
        WHERE email = #{email}
    </select>

<!--    아이디 중복 체크   -->
    <select id="emailCheck" resultType="int">
        SELECT COUNT(*)
        FROM user
        WHERE email = #{email}
    </select>

<!--    닉네임 중복 체크   -->
    <select id="nicknameCheck" resultType="int">
        SELECT COUNT(*)
        FROM user
        WHERE nickname = #{nickname}
    </select>

<!--    비밀번호 변경   -->
    <update id="changePassword">
        UPDATE user
        SET password = #{newPassword}
        WHERE email = #{email}
    </update>

    <!--    메인 페이지 유저없이 상품 선택   -->
    <select id="selectProductAndUrlAll" resultType="java.util.Map">
        SELECT
            product.id,
            product.status,
            product.name,
            FORMAT(product.price, 0) AS price,
            product.discount_rate,
            product.stock_quantity,
            DATE_FORMAT(product.created_at, '%Y-%m-%d') AS created_at,
            DATE_FORMAT(product.updated_at, '%Y-%m-%d') AS updated_at,
            category.category_name,
            (SELECT url FROM product_image WHERE product_id = product.id AND file_path = 'mainImages') AS url
        FROM product product
                 JOIN category category
                      ON product.category_id = category.id
        WHERE product.status = 1
        ORDER BY product.id DESC
    </select>

    <!--    메인 페이지 선택 상품 리스트 조회   -->
    <select id="selectProductAndUrlList" resultType="java.util.Map">
        SELECT
        product.id,
        product.status,
        product.name,
        FORMAT(product.price, 0) AS price,
        product.discount_rate,
        product.stock_quantity,
        DATE_FORMAT(product.created_at, '%Y-%m-%d') AS created_at,
        DATE_FORMAT(product.updated_at, '%Y-%m-%d') AS updated_at,
        category.category_name,
        (SELECT url FROM product_image WHERE product_id = product.id AND file_path = 'mainImages') AS url,
        <if test="userId != ''">
            ifnull((SELECT id FROM likes WHERE product_id = product.id AND user_id = #{userId} limit 1),0) AS like_id,
            ifnull((SELECT amount FROM cart WHERE product_id = product.id AND user_id = #{id} limit 1), 0) AS amount
        </if>
        FROM product product
        JOIN category category
        ON product.category_id = category.id
        <where>
            product.status = 1
            <if test="selectedCategory != ''">
                AND category_name = #{selectedCategory}
            </if>
            <if test="searchKeyword != ''">
                AND product.name LIKE CONCAT('%', #{searchKeyword}, '%')
            </if>

        </where>
        ORDER BY product.id DESC
    </select>

    <!--    메인 페이지 로그인했을 때 상품 선택   -->
    <select id="selectProductAndUrlAndLikeAll" resultType="java.util.Map">
        SELECT
            product.id,
            product.status,
            product.name,
            FORMAT(product.price, 0) AS price,
            product.discount_rate,
            product.stock_quantity,
            DATE_FORMAT(product.created_at, '%Y-%m-%d') AS created_at,
            DATE_FORMAT(product.updated_at, '%Y-%m-%d') AS updated_at,
            category.category_name,
            (SELECT url FROM product_image WHERE product_id = product.id AND file_path = 'mainImages') AS url,
            ifnull((SELECT id FROM likes WHERE product_id = product.id AND user_id = #{id} limit 1), 0) AS like_id,
            ifnull((SELECT amount FROM cart WHERE product_id = product.id AND user_id = #{id} limit 1), 0) AS cart_amount
        FROM product product
                 JOIN category category
                      ON product.category_id = category.id
        WHERE product.status = 1
        ORDER BY product.id DESC
    </select>

    <!--    찜 추가   -->
    <insert id="addLike">
        INSERT INTO likes(user_id, product_id)
        VALUES (#{userId}, #{productId})
    </insert>
    <!--    찜 삭제   -->
    <delete id="deleteLike">
        DELETE FROM likes
        WHERE user_id = #{userId} AND product_id = #{productId}
    </delete>

    <!--    찜 카운트   -->
    <select id="countUserLike" resultType="int">
        SELECT COUNT(*)
        FROM likes
        WHERE user_id = #{userId}
    </select>

    <!--    장바구니 카운트   -->
    <select id="countUserCart" resultType="int">
        SELECT COUNT(*)
        FROM cart
        WHERE user_id = #{userId}
    </select>

<!--    장바구니 추가   -->
    <insert id="addCart">
        INSERT INTO cart(user_id, product_id, amount)
        VALUES (#{userId}, #{productId}, #{amount})
    </insert>

<!--    장바구니 삭제   -->
    <delete id="deleteCart">
        DELETE FROM cart
        WHERE user_id = #{userId} AND product_id = #{productId}
    </delete>

<!--    장바구니 상품 수량 변경   -->
    <update id="updateCart">
        UPDATE cart
        SET amount = #{amount}
        WHERE user_id = #{userId} AND product_id = #{productId}
    </update>

<!--    장바구니에 상품이 이미 들어있는지 체크   -->
    <select id="checkCart" resultType="int">
        SELECT COUNT(*)
        FROM cart
        WHERE user_id = #{userId} AND product_id = #{productId}
    </select>

<!--    장바구니에 담긴 상품 수량 찾기    -->
    <select id="countCartAmount" resultType="int">
        SELECT amount
        FROM cart
        WHERE user_id = #{userId} AND product_id = #{productId}
    </select>

<!--    상품 상세정보 가져오기   -->
    <select id="findProductDetail" resultType="com.shop.fruitshop.user.DetailDto">
        SELECT id AS product_id, name, price, discount_rate, stock_quantity, content,
               (SELECT url FROM product_image WHERE product_id = #{productId} AND file_path = 'mainImages') AS url,
               <if test="userId != ''">
                   ifnull((SELECT id FROM likes WHERE product_id = #{productId} AND user_id = #{userId} limit 1),0) AS like_id
               </if>
        FROM product
        WHERE id = #{productId}
    </select>

<!--    상품 수량 가져오기    -->
    <select id="getMaxAmount" resultType="int">
        SELECT stock_quantity
        FROM product
        WHERE id = #{productId}
    </select>

<!--    유저 아이디로 장바구니 상품들 가져오기   -->
    <select id="findCartByUserId" resultType="com.shop.fruitshop.user.CartDto">
        SELECT cart.id AS cart_id, product.id AS product_id, cart.amount, product.name, product.price, product.discount_rate, product.stock_quantity,
               (SELECT url FROM product_image WHERE product_id = product.id AND file_path = 'mainImages') AS url
        FROM cart cart
            JOIN product product
                ON cart.product_id = product.id
        WHERE cart.user_id = #{userId}
    </select>

<!--    장바구니에 들어있는 상품 가격 총 합 구하기-->
    <select id="findCartTotalPrice" resultType="com.shop.fruitshop.user.TotalDto">
        SELECT SUM(product.price * cart.amount) AS price, SUM((product.price * (1-product.discount_rate/100)) * cart.amount) AS total,
               SUM((product.price * (product.discount_rate/100)) * cart.amount) AS discount
        FROM cart cart
            JOIN product product
                ON cart.product_id = product.id
        WHERE cart.user_id = #{userId}
    </select>

<!--    유저 배송지 구하기   -->
    <select id="getUserDeliveryByUserId" resultType="com.shop.fruitshop.user.UserDeliveryVo">
        SELECT id AS delivery_id, user_id, delivery_name, delivery_user_name, phone_number, zipcode, address, address_detail
        FROM delivery
        WHERE user_id = #{userId}
    </select>

<!--    배송지 id로 배송지 정보 가져오기  -->
    <select id="getDeliveryByDeliveryId" resultType="java.util.HashMap">
        SELECT id, user_id, delivery_name, delivery_user_name, phone_number, zipcode, address, address_detail
        FROM delivery
        WHERE id = #{deliveryId}
    </select>

<!--    배송지 추가하기   -->
    <insert id="addDelivery" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO delivery (user_id, delivery_name, delivery_user_name, phone_number, zipcode, address, address_detail)
        VALUES (#{userId}, #{deliveryName}, #{deliveryUserName}, #{phone}, #{zipcode}, #{address}, #{addressDetail})
    </insert>
</mapper>